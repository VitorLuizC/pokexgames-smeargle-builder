{"version":3,"sources":["helpers/identity.js","components/SortableTable.js","components/PokemonName.js","helpers/normalize.js","assets/icons/Loupe.svg","components/SearchField.js","App.js","serviceWorker.js","index.js"],"names":["identity","value","Sortment","Object","freeze","NONE","ASCENDING","DESCENDING","SortableTable","rows","cols","useState","undefined","sorter","setSorter","sortment","setSortment","page","setPage","resultsPerPage","setResultsPerPage","pages","Math","ceil","length","useEffect","onChangeFor","col","isFirst","isLast","className","map","index","isSorting","classNames","onClick","style","textAlign","align","label","slice","paginateRows","compare","sort","rowA","rowB","valueA","valueB","String","localeCompare","Number","resolveCompare","reverse","sortRows","row","render","onChange","event","target","disabled","PokemonName","icon","link","name","title","rel","href","src","alt","normalize","toLocaleLowerCase","replace","trim","SearchField","placeholder","id","Date","now","onSubmit","preventDefault","htmlFor","Loupe","type","App","term","setTerm","filteredMoves","moves","filter","move","pokemon","some","includes","filterBy","position","moveA","moveB","toValue","exec","cooldown","level","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5f9e2a6a.chunk.js","sourcesContent":["/**\n * Returns the value received.\n * @param {T} value\n * @returns {T}\n * @template T\n */\nexport default function identity(value) {\n  return value;\n}\n","import \"./SortableTable.scss\";\nimport React, { useState, useEffect } from \"react\";\nimport identity from \"../helpers/identity\";\n\nconst Sortment = Object.freeze({\n  NONE: 0,\n  ASCENDING: 1,\n  DESCENDING: 2\n});\n\n/**\n * Resolves compare function from sorter column.\n * @param {TableCol<T>} col\n * @returns {(rowA: T, rowB: T) => number}\n * @template T\n */\nfunction resolveCompare({ sort, value = identity } = {}) {\n  if (typeof sort === \"function\") {\n    return sort;\n  }\n\n  return (rowA, rowB) => {\n    const valueA = value(rowA),\n      valueB = value(rowB);\n\n    if (typeof valueA === \"string\" || typeof valueB === \"string\")\n      return String(valueA).localeCompare(String(valueB));\n    if (typeof valueA === \"number\" || typeof valueB === \"number\")\n      return Number(valueA) - Number(valueB);\n    return 0;\n  };\n}\n\nfunction SortableTable({ rows, cols }) {\n  const [sorter, setSorter] = useState(undefined);\n  const [sortment, setSortment] = useState(Sortment.NONE);\n  const [page, setPage] = useState(0);\n  const [resultsPerPage, setResultsPerPage] = useState(10);\n\n  const pages = Math.ceil(rows.length / resultsPerPage);\n\n  useEffect(() => {\n    setPage(0);\n  }, [rows]);\n\n  const sortRows = rows => {\n    if (sortment === Sortment.NONE) {\n      return rows;\n    }\n\n    const compare = resolveCompare(sorter);\n\n    if (sortment === Sortment.ASCENDING) {\n      return [...rows].sort(compare);\n    }\n\n    if (sortment === Sortment.DESCENDING) {\n      return [...rows].sort(compare).reverse();\n    }\n  };\n\n  const onChangeFor = col => () => {\n    setPage(0);\n    setSorter(sortment === Sortment.DESCENDING ? undefined : col);\n    setSortment(\n      {\n        [Sortment.NONE]: Sortment.ASCENDING,\n        [Sortment.ASCENDING]: Sortment.DESCENDING,\n        [Sortment.DESCENDING]: Sortment.NONE\n      }[sortment]\n    );\n  };\n\n  const paginateRows = rows =>\n    rows.slice(resultsPerPage * page, resultsPerPage * page + resultsPerPage);\n\n  const isFirst = page === 0;\n  const isLast = page === pages - 1;\n\n  return (\n    <>\n      <table className=\"sortable-table\">\n        <thead className=\"header\">\n          <tr className=\"row\">\n            {cols.map((col, index) => {\n              const isSorting = sorter === col;\n              const classNames = `cell ${\n                isSorting ? \"-sorting\" : \"-unsorting\"\n              }`;\n              return (\n                <th\n                  key={index}\n                  className={classNames}\n                  onClick={onChangeFor(col)}\n                  style={{ textAlign: col.align || \"left\" }}\n                >\n                  <span className=\"label\">{col.label}</span>\n\n                  <span className=\"arrow\">\n                    {isSorting && sortment === Sortment.ASCENDING ? \"▲\" : \"▼\"}\n                  </span>\n                </th>\n              );\n            })}\n          </tr>\n        </thead>\n\n        <tbody className=\"content\">\n          {paginateRows(sortRows(rows)).map((row, index) => (\n            <tr className=\"row\" key={index}>\n              {cols.map((col, index) => {\n                const { render, value = identity, align = \"left\" } = col || {};\n\n                return (\n                  <td key={index} style={{ textAlign: align }} className=\"cell\">\n                    {render ? render({ row, index }) : value(row)}\n                  </td>\n                );\n              })}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n\n      <div className=\"pagination\">\n        <div className=\"results\">\n          <label className=\"label\">Results per page</label>\n\n          <select\n            value={resultsPerPage}\n            className=\"field\"\n            onChange={event => {\n              const value = +event.target.value;\n              setPage(0);\n              setResultsPerPage(value);\n            }}\n          >\n            {[10, 25, 50, 100].map(value => (\n              <option key={value} value={value}>\n                {value}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"controls\">\n          <button\n            className=\"button\"\n            disabled={isFirst}\n            onClick={() => setPage(0)}\n          >\n            First\n          </button>\n          <button\n            className=\"button\"\n            disabled={isFirst}\n            onClick={() => setPage(page - 1)}\n          >\n            Previous\n          </button>\n          <p className=\"current\">\n            {page + 1} / {pages}\n          </p>\n          <button\n            className=\"button\"\n            disabled={isLast}\n            onClick={() => setPage(page + 1)}\n          >\n            Next\n          </button>\n          <button\n            className=\"button\"\n            disabled={isLast}\n            onClick={() => setPage(pages - 1)}\n          >\n            Last\n          </button>\n        </div>\n      </div>\n    </>\n  );\n}\n\nexport default SortableTable;\n","import \"./PokemonName.scss\";\nimport React from \"react\";\n\nexport default function PokemonName({ icon, link, name }) {\n  const title = \"Icon for \" + name;\n\n  return (\n    <a\n      rel=\"noopener noreferrer\"\n      href={link}\n      target=\"_blank\"\n      className=\"pokemon-name\"\n    >\n      <figure className=\"icon\">\n        <img className=\"image\" src={icon} alt={name} title={title} />\n      </figure>\n\n      <span className=\"name\">{name}</span>\n    </a>\n  );\n}\n","/**\n * Normalizes string values.\n * @param {string} [value]\n * @returns {string}\n */\nexport default function normalize(value) {\n  return (value || \"\")\n    .toLocaleLowerCase()\n    .replace(/\\s+/g, \" \")\n    .trim();\n}\n","export default __webpack_public_path__ + \"static/media/Loupe.10f767fe.svg\";","import \"./SearchField.scss\";\nimport React from \"react\";\nimport Loupe from \"../assets/icons/Loupe.svg\";\n\nexport default function SearchField({ value, placeholder, onChange }) {\n  const id = \"id-\" + Date.now();\n\n  return (\n    <form className=\"search-field\" onSubmit={event => event.preventDefault()}>\n      <label className=\"label\" htmlFor={id}>\n        <img className=\"icon\" src={Loupe} alt=\"Search\" title=\"Loupe icon.\" />\n      </label>\n\n      <input\n        id={id}\n        type=\"search\"\n        value={value}\n        className=\"field\"\n        placeholder={placeholder}\n        onChange={event => onChange(event.target.value)}\n      />\n    </form>\n  );\n}\n","import \"./App.scss\";\nimport moves from \"./data.json\";\nimport SortableTable from \"./components/SortableTable\";\nimport React, { useState } from \"react\";\nimport PokemonName from \"./components/PokemonName\";\nimport normalize from \"./helpers/normalize\";\nimport SearchField from \"./components/SearchField\";\n\n/**\n * Returns a filter function by term.\n * @param {string} term\n * @returns {(move: Move) => boolean}\n */\nfunction filterBy(term) {\n  return move => {\n    if (!term) {\n      return true;\n    }\n\n    const targets = [move.name, move.type, move.pokemon.name].map(normalize);\n\n    return targets.some(target => target.includes(normalize(term)));\n  };\n}\n\nfunction App() {\n  const [term, setTerm] = useState(\"\");\n\n  const filteredMoves = moves.filter(filterBy(term));\n\n  return (\n    <main className=\"App\">\n      <SearchField\n        value={term}\n        onChange={setTerm}\n        placeholder=\"Search by Pokémon, move name or even type.\"\n      />\n\n      <SortableTable\n        rows={filteredMoves}\n        cols={[\n          {\n            label: \"Position\",\n            value: move => move.position,\n            align: \"center\",\n            sort: (moveA, moveB) => {\n              const toValue = move => {\n                const [, value = 10000] =\n                  /M(\\d+)/i.exec(move.position || \"\") || [];\n                return +value;\n              };\n\n              return toValue(moveA) - toValue(moveB);\n            }\n          },\n          {\n            label: \"Pokémon\",\n            value: move => move.pokemon.name,\n            render: ({ row: move }) => (\n              <PokemonName\n                icon={move.pokemon.icon}\n                link={move.pokemon.link}\n                name={move.pokemon.name}\n              />\n            )\n          },\n          {\n            label: \"Move\",\n            value: move => move.name\n          },\n          {\n            label: \"Type\",\n            value: move => move.type\n          },\n          {\n            label: \"Cooldown\",\n            align: \"right\",\n            value: move => move.cooldown || 0,\n            render: ({ row: move }) =>\n              move.cooldown ? move.cooldown + \"s\" : \"-\"\n          },\n          {\n            label: \"Level\",\n            align: \"right\",\n            value: move => move.level || 0,\n            render: ({ row: move }) => (move.level ? move.level : \"-\")\n          }\n        ]}\n      />\n    </main>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}